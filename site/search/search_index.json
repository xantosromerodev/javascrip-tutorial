{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JS Home","text":"<p>Bienvenidos al tutorial JavaScript de W3Schools. Creemos en la calidad del contenido que produce W3Schools y por eso hemos decidido traducir todo el tutorial completamente al espa\u00f1ol.</p> <ul> <li>JavaScript es el lenguaje de programaci\u00f3n m\u00e1s popular del mundo.</li> <li>JavaScript es el lenguaje de programaci\u00f3n de la web.</li> <li>JavaScript es f\u00e1cil de aprender.  </li> </ul> <p>Este tutorial te ense\u00f1ar\u00e1 JavaScript desde lo b\u00e1sico hasta lo m\u00e1s avanzado.</p>"},{"location":"#acerca-del-traductor","title":"Acerca del traductor","text":"<p>El contenido de este tutorial es propiedad de W3Schools, y ha sido traducido por @xantosromero para Frontend Club y toda la comunidad en espa\u00f1ol.s</p> <p>Si crees que este tutorial te ha servido, puedes invitarle un caf\u00e9 para que siga creando m\u00e1s contenido:</p> <p></p>"},{"location":"01_js_intro/","title":"Introduccion a JavaScript","text":"<p>Este tutorial contiene algunos ejemplos de lo que JavaScript puede hacer.</p>"},{"location":"01_js_intro/#js-puede-cambiar-el-contenido","title":"JS puede cambiar el contenido","text":"<p>Uno de los tantos m\u00e9todos de HTML para JavaScript es <code>getElementById()</code>.</p> <p>El siguiente ejemplo \"encuentra\" un elemento HTML (id=\"demo\") y cambia el contenido del elemento (innerHTML) a \"Hola JavaScript\":</p> <p>Ejemplo:</p> <pre><code>document.getElementById(\"demo\").innerHTML = \"Hola JavaScript\";\n</code></pre> <p>Nota: JavaScript acepta comillas simples y dobles.\ud83d\udc47</p> <p>Ejemplo:</p> <pre><code>document.getElementById('demo').innerHTML = 'Hola JavaScript';\n</code></pre>"},{"location":"01_js_intro/#js-puede-cambiar-los-valores-de-los-atributos","title":"JS puede cambiar los valores de los atributos","text":"<p>En este ejemplo, JavaScript cambia el valor del atributo src de la etiqueta <code>&lt;img&gt;</code>:</p> <p>Ejemplo:</p>    See the Pen    JavaScript puede cambiar el valor del atributo HTML por Santos Romero (@xantosromero)   on CodePen."},{"location":"01_js_intro/#js-puede-cambiar-los-estilos","title":"JS puede cambiar los estilos","text":"<p>Cambiar el estilo de un elemento HTML, es una variante de cambiar un atributo HTML.</p> <p>Ejemplo:</p> <pre><code>document.getElementById(\"demo\").style.fontSize = \"35px\";\n</code></pre>"},{"location":"01_js_intro/#js-puede-ocultar-elementos","title":"JS puede ocultar elementos","text":"<p>Se pueden ocultar elementos HTML cambiando el estilo <code>display</code>.</p> <p>Ejemplo:</p> <pre><code>document.getElementById(\"demo\").style.display = \"none\";\n</code></pre>"},{"location":"01_js_intro/#js-puede-mostrar-elementos","title":"JS puede mostrar elementos","text":"<p>Tambi\u00e9n se pueden mostrar elementos HTML ocultos cambiando el estilo <code>display</code>.</p> <p>Ejemplo:</p> <pre><code>document.getElementById(\"demo\").style.display = \"block\";\n</code></pre>"},{"location":"01_js_intro/#sabias-esto","title":"\u00bfSab\u00edas esto?","text":"<ul> <li>JavaScript y Java son lenguajes completamente diferentes, tanto en concepto como en dise\u00f1o.</li> <li>JavaScript fue inventado por Brendan Eich en 1995 y se convirti\u00f3 en un est\u00e1ndar ECMA en 1997.</li> <li>ECMA-262 es el nombre oficial del est\u00e1ndar. ECMAScript es el nombre oficial del idioma.</li> </ul>"},{"location":"01_js_intro/#conclusion","title":"Conclusi\u00f3n","text":"<p>JavaScript puede modificar el contenido HTML con m\u00e9todos como <code>getElementById()</code>, cambiar el texto de un elemento con <code>innerHTML</code>. Tambi\u00e9n puede modificar atributos, como el <code>src</code> de una imagen, y estilos CSS, como el tama\u00f1o de fuente con <code>style.fontSize</code>. Adem\u00e1s, JavaScript permite ocultar o mostrar elementos cambiando el estilo <code>display</code>.</p>"},{"location":"02_js_where_to/","title":"Where to JavaScript","text":""},{"location":"02_js_where_to/#la-etiqueta-script","title":"La etiqueta <code>&lt;script&gt;</code>","text":"<p>En HTML, el c\u00f3digo JavaScript se inserta entre las etiquetas <code>&lt;script&gt;</code> y <code>&lt;/script&gt;</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;script&gt;\n    document.getElementById(\"demo\").innerHTML = \"Mi primer programa JavaScript\";\n&lt;/script&gt;\n</code></pre> <p>Los ejemplos antiguos de JavaScript usaban un atributo <code>type</code>: <code>&lt;script type=\"text/javascript\"&gt;</code>. El atributo <code>type</code> no es obligatorio. JavaScript es el lenguaje de secuencias de comandos predeterminado en HTML.</p>"},{"location":"02_js_where_to/#funciones-y-eventos","title":"Funciones y eventos","text":"<p>Una funci\u00f3n de JavaScript es un bloque de c\u00f3digo que se puede ejecutar cuando se \"invoca\".</p> <p>Por ejemplo, se puede llamar a una funci\u00f3n cuando ocurre un evento, como cuando el usuario hace clic en un bot\u00f3n.</p> <p>Aprender\u00e1s mucho m\u00e1s sobre funciones y eventos en cap\u00edtulos posteriores.</p>"},{"location":"02_js_where_to/#js-en-el-head-o-body","title":"JS en el <code>&lt;head&gt;</code> o <code>&lt;body&gt;</code>","text":"<p>Puedes colocar cualquier cantidad de scripts en un documento HTML.</p> <p>Los scripts se pueden colocar en la secci\u00f3n <code>&lt;body&gt;</code>, o en el <code>&lt;head&gt;</code> de una p\u00e1gina HTML, o en ambas.</p>"},{"location":"02_js_where_to/#js-en-el-head","title":"JS en el <code>&lt;head&gt;</code>","text":"<p>En este ejemplo, se coloca una funci\u00f3n de JavaScript en la secci\u00f3n <code>&lt;head&gt;</code> de una p\u00e1gina HTML.</p> <p>La funci\u00f3n se invoca (llama) cuando se hace clic en un bot\u00f3n.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction myFunction() {\n  document.getElementById(\"demo\").innerHTML = \"Parrafo cambiado.\";\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;JavaScript en el Head&lt;/h2&gt;\n\n&lt;p id=\"demo\"&gt;Un parrafo&lt;/p&gt;\n&lt;button type=\"button\" onclick=\"myFunction()\"&gt;Ejecutar&lt;/button&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"02_js_where_to/#js-en-el-body","title":"JS en el <code>&lt;body&gt;</code>","text":"<p>En este ejemplo, se coloca una funci\u00f3n de JavaScript en la secci\u00f3n <code>&lt;body&gt;</code> de una p\u00e1gina HTML.</p> <p>La funci\u00f3n se invoca (llama) cuando se hace clic en un bot\u00f3n.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h2&gt;JavaScript en el Body&lt;/h2&gt;\n\n&lt;p id=\"demo\"&gt;Un parrafo&lt;/p&gt;\n\n&lt;button type=\"button\" onclick=\"myFunction()\"&gt;Ejecutar&lt;/button&gt;\n\n&lt;script&gt;\nfunction myFunction() {\n  document.getElementById(\"demo\").innerHTML = \"Parrafo cambiado.\";\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Colocar scripts en la parte inferior del elemento <code>&lt;body&gt;</code> mejora la velocidad de visualizaci\u00f3n, porque la interpretaci\u00f3n de scripts ralentiza la visualizaci\u00f3n.</p>"},{"location":"02_js_where_to/#js-externo","title":"JS externo","text":"<p>Los scripts tambi\u00e9n se pueden colocar en archivos externos.</p> <p>Ejemplo:</p> <p>Archivo externo: <code>script.js</code></p> <pre><code>function myFunction() {\n  document.getElementById(\"demo\").innerHTML = \"Parrafo cambiado.\";\n}\n</code></pre> <p>Los scripts externos son pr\u00e1cticos cuando se utiliza el mismo c\u00f3digo en muchas p\u00e1ginas web diferentes.</p> <p>Los archivos JavaScript tienen la extensi\u00f3n de archivo <code>.js</code></p> <p>Para utilizar un script externo, coloque el nombre del archivo del script en el atributo <code>src</code> de una etiqueta <code>&lt;script&gt;</code>:</p> <p>Ejemplo:</p> <pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Puedes colocar una referencia de script externa en <code>&lt;head&gt;</code> o <code>&lt;body&gt;</code> como desee.</p> <p>El script se comportar\u00e1 como si estuviera ubicado exactamente donde se encuentra la etiqueta <code>&lt;script&gt;</code>.</p> <p>Los scripts externos no pueden contener etiquetas <code>&lt;script&gt;</code>.</p>"},{"location":"02_js_where_to/#ventajas-de-usar-js-externo","title":"Ventajas de usar JS externo","text":"<p>Colocar scripts en archivos externos tiene algunas ventajas.</p> <ul> <li>Separa HTML y c\u00f3digo.</li> <li>Hace que HTML y JavaScript sean m\u00e1s f\u00e1ciles de leer y mantener.</li> <li>Los archivos JavaScript almacenados en cach\u00e9 pueden acelerar la carga de la p\u00e1gina.</li> </ul> <p>Para agregar varios archivos de script a una p\u00e1gina, utilice varias etiquetas de <code>&lt;script&gt;</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;script src=\"myScript1.js\"&gt;&lt;/script&gt;\n&lt;script src=\"myScript2.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"02_js_where_to/#referencias-externas","title":"Referencias externas","text":"<p>Se puede hacer referencia a un script externo de 3 maneras diferentes.</p> <ul> <li>Con una URL completa (una direcci\u00f3n web completa)</li> <li>Con una ruta de archivo (como <code>/js/</code>)</li> <li>Sin ninguna ruta</li> </ul> <p>Este ejemplo utiliza una URL completa para vincular a <code>myScript.js</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;script src=\"https://www.w3schools.com/js/myScript.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Este ejemplo utiliza una ruta de archivo para vincular a <code>myScript.js</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;script src=\"/js/myScript.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Este ejemplo no utiliza ninguna ruta para vincular a <code>myScript.js</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;script src=\"myScript.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"02_js_where_to/#conclusion","title":"Conclusi\u00f3n","text":"<p>JavaScript nos permite insertar c\u00f3digo en HTML mediante las etiquetas <code>&lt;script&gt;</code>. Se puede colocar en las secciones <code>&lt;head&gt;</code> o <code>&lt;body&gt;</code> del documento, y en archivos externos con la extensi\u00f3n <code>.js</code>. Los scripts externos mejoran la organizaci\u00f3n y el mantenimiento del c\u00f3digo. JavaScript tambi\u00e9n puede ejecutarse con eventos, como clics de bot\u00f3n, invocando funciones definidas. Colocar los scripts al final del <code>&lt;body&gt;</code> mejora la velocidad de carga.</p>"},{"location":"03_js_output/","title":"Output JavaScript","text":""},{"location":"03_js_output/#formas-de-visualizacion","title":"Formas de visualizaci\u00f3n","text":"<p>JavaScript puede \"mostrar\" datos de diferentes maneras.</p> <ul> <li>Escribir en un elemento HTML, usando <code>innerHTML</code>.</li> <li>Escribir en un HTML output usando <code>document.write()</code>.</li> <li>Escribir en un cuadro de alerta, usando <code>window.alert()</code>.</li> <li>Escribiendo en la consola del navegador, usando <code>console.log()</code>.</li> </ul>"},{"location":"03_js_output/#usando-innerhtml","title":"Usando <code>innerHTML</code>","text":"<p>Para acceder a un elemento HTML, JavaScript puede utilizar el m\u00e9todo <code>document.getElementById(id)</code>.</p> <p>El atributo <code>id</code> define el elemento HTML. La propiedad <code>innerHTML</code> define el contenido HTML.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Mi primera pagina web&lt;/h1&gt;\n&lt;p&gt;Mi primer parrafo.&lt;/p&gt;\n\n&lt;p id=\"demo\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\ndocument.getElementById(\"demo\").innerHTML = 5 + 6;\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Cambiar la propiedad <code>innerHTML</code> de un elemento HTML es una forma com\u00fan de mostrar datos en HTML.</p>"},{"location":"03_js_output/#usando-documentwrite","title":"Usando <code>document.write()</code>","text":"<p>Para fines de prueba, es conveniente utilizar <code>document.write()</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Mi primera pagina web&lt;/h1&gt;\n&lt;p&gt;Mi primer parrafo.&lt;/p&gt;\n\n&lt;script&gt;\ndocument.write(5 + 6);\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>El uso de <code>document.write()</code> despu\u00e9s de cargar un documento HTML, eliminar\u00e1 todo el HTML existente.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Mi primera pagina web&lt;/h1&gt;\n&lt;p&gt;Mi primer parrafo.&lt;/p&gt;\n\n&lt;button type=\"button\" onclick=\"document.write(5 + 6)\"&gt;Probar&lt;/button&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>El m\u00e9todo <code>document.write()</code> solo debe usarse para pruebas.</p>"},{"location":"03_js_output/#usando-windowalert","title":"Usando <code>window.alert()</code>","text":"<p>Puedes utilizar un cuadro de alerta para mostrar datos.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Mi primera pagina web&lt;/h1&gt;\n&lt;p&gt;Mi primer parrafo.&lt;/p&gt;\n\n&lt;script&gt;\n    window.alert(5 + 6);\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Puedes omitir la palabra clave <code>window</code>.</p> <p>En JavaScript, el objeto <code>window</code> es el objeto de alcance global. Esto significa que las variables, propiedades y m\u00e9todos pertenecen por defecto al objeto <code>window</code>. Esto tambi\u00e9n significa que especificar la palabra clave <code>window</code> es opcional.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Mi primera pagina web&lt;/h1&gt;\n&lt;p&gt;Mi primer parrafo.&lt;/p&gt;\n\n&lt;script&gt;\nalert(5 + 6);\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03_js_output/#usando-consolelog","title":"Usando <code>console.log()</code>","text":"<p>Para fines de depuraci\u00f3n, puedes llamar al m\u00e9todo <code>console.log()</code> en el navegador para mostrar datos.</p> <p>Aprender\u00e1s m\u00e1s sobre depuraci\u00f3n en un cap\u00edtulo posterior.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;script&gt;\nconsole.log(5 + 6);\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03_js_output/#imprimir-en-javascript","title":"Imprimir en JavaScript","text":"<p>JavaScript no tiene ning\u00fan objeto de impresi\u00f3n ni m\u00e9todos de impresi\u00f3n.</p> <p>No puedes acceder a los dispositivos de salida desde JavaScript.</p> <p>La \u00fanica excepci\u00f3n es que puede llamar al m\u00e9todo <code>window.print()</code> en el navegador para imprimir el contenido de la ventana actual.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;button onclick=\"window.print()\"&gt;Imprimir esta p\u00e1gina.&lt;/button&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03_js_output/#conclusion","title":"Conclusi\u00f3n","text":"<p>En JavaScript, tenemos diversas formas de mostrar datos en una p\u00e1gina web. Se pueden usar m\u00e9todos como <code>innerHTML</code> para cambiar el contenido de un elemento HTML, <code>document.write()</code> para escribir directamente en el documento (aunque solo se recomienda para pruebas), <code>window.alert()</code> para mostrar datos en un cuadro de alerta, y <code>console.log()</code> para depuraci\u00f3n en la consola del navegador. Recordar que JavaScript no tiene m\u00e9todos de impresi\u00f3n, pero se puede usar <code>window.print()</code> para imprimir la p\u00e1gina actual.</p>"},{"location":"04_js_statements/","title":"Declaraciones JavaScript","text":"<p>Ejemplo:</p> <pre><code>let x, y, z;    // Declaracion 1\nx = 5;          // Declaracion 2\ny = 6;          // Declaracion 3\nz = x + y;      // Declaracion 4\n</code></pre>"},{"location":"04_js_statements/#programas-javascript","title":"Programas JavaScript","text":"<p>Un programa de computadora es una lista de \"instrucciones\" que una computadora debe \"ejecutar\".</p> <p>En un lenguaje de programaci\u00f3n, estas instrucciones de programaci\u00f3n se denominan declaraciones.</p> <p>Un programa JavaScript es una lista de declaraciones de programaci\u00f3n.</p> <p>En HTML, los programas JavaScript los ejecuta el navegador web.</p>"},{"location":"04_js_statements/#declaraciones-javascript_1","title":"Declaraciones JavaScript","text":"<p>Las declaraciones de JavaScript se componen de:</p> <ul> <li>Valores</li> <li>Operadores</li> <li>Expresiones</li> <li>Palabras clave y comentarios</li> </ul> <p>\ud83d\udc47Esta declaraci\u00f3n le dice al navegador que escriba \"Hola Doly.\" dentro de un elemento HTML con <code>id=\"demo\"</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;script&gt;\n    document.getElementById(\"demo\").innerHTML = \"Hola Doly.\";\n&lt;/script&gt;\n</code></pre> <p>La mayor\u00eda de los programas JavaScript contienen muchas declaraciones.</p> <p>Las declaraciones se ejecutan, una por una, en el mismo orden en que est\u00e1n escritas (de arriba hacia abajo).</p> <p>Los programas JavaScript (y las declaraciones JavaScript) a menudo se denominan c\u00f3digo JavaScript.</p>"},{"location":"04_js_statements/#punto-y-coma","title":"Punto y coma","text":"<p>El punto y coma separa las declaraciones de JavaScript.</p> <p>Agregue un punto y coma al final de cada declaraci\u00f3n ejecutable.</p> <p>Ejemplo:</p> <pre><code>let a, b, c;  // Declara 3 variables\na = 5;        // Asigna el valor 5 -&gt; a\nb = 6;        // Asigna el valor 6 -&gt; b\nc = a + b;    // Asigna la suma de a y b -&gt; c\n</code></pre> <p>Cuando est\u00e1n separados por punto y coma, se permiten varias declaraciones en una l\u00ednea.</p> <p>Ejemplo:</p> <pre><code>a = 5; b = 6; c = a + b;\n</code></pre> <p>En la web, es posible que vea ejemplos sin punto y coma. No es obligatorio terminar las declaraciones con punto y coma, pero es muy recomendable.</p>"},{"location":"04_js_statements/#espacios-en-blanco","title":"Espacios en blanco","text":"<p>JavaScript ignora m\u00faltiples espacios. Puedes agregar espacios en blanco al script para hacerlo m\u00e1s legible.</p> <p>Las siguientes l\u00edneas son equivalentes:</p> <pre><code>let person = \"Hege\";\nlet person=\"Hege\";\n</code></pre> <p>Una buena pr\u00e1ctica es poner espacios alrededor de los operadores <code>(= + - * /)</code>:</p> <pre><code>let x = y + z;\n</code></pre>"},{"location":"04_js_statements/#longitud-y-saltos-de-linea","title":"Longitud y saltos de l\u00ednea","text":"<p>Para una mejor legibilidad, los programadores suelen evitar l\u00edneas de c\u00f3digo de m\u00e1s de 80 caracteres.</p> <p>Si una declaraci\u00f3n de JavaScript no cabe en una l\u00ednea, el mejor lugar para dividirla es despu\u00e9s de un operador.</p> <p>Ejemplo:</p> <pre><code>document.getElementById(\"demo\").innerHTML =\n\"Hola Doly\";\n</code></pre>"},{"location":"04_js_statements/#bloques-de-codigo","title":"Bloques de c\u00f3digo","text":"<p>Las declaraciones de JavaScript se pueden agrupar en bloques de c\u00f3digo, dentro de llaves <code>{...}</code>.</p> <p>El prop\u00f3sito de los bloques de c\u00f3digo es definir declaraciones que se ejecutar\u00e1n juntas.</p> <p>Un lugar donde encontrar\u00e1 declaraciones agrupadas en bloques es en las funciones de JavaScript.</p> <p>Ejemplo:</p> <pre><code>function myFunction() {\n  document.getElementById(\"demo1\").innerHTML = \"Hola Doly!\";\n  document.getElementById(\"demo2\").innerHTML = \"\u00bfC\u00f3mo est\u00e1s?\";\n}\n</code></pre> <p>En este tutorial utilizamos 2 espacios de sangr\u00eda para bloques de c\u00f3digo. Aprender\u00e1s m\u00e1s sobre las funciones m\u00e1s adelante en este tutorial.</p>"},{"location":"04_js_statements/#palabras-clave","title":"Palabras clave","text":"<p>Las declaraciones de JavaScript suelen comenzar con una palabra clave para identificar la acci\u00f3n de JavaScript que se realizar\u00e1.</p> <p>Nuestra referencia de palabras reservadas enumera todas las palabras clave de JavaScript.</p> <p>Aqu\u00ed hay una lista de algunas de las palabras clave que aprender\u00e1s en este tutorial.</p> Palabra clave Descripci\u00f3n <code>var</code> Declara una variable. <code>let</code> Declara una variable de bloque. <code>const</code> Declara un bloque constante. <code>if</code> Marca un bloque de declaraciones que se ejecutar\u00e1n bajo una condici\u00f3n. <code>switch</code> Marca un bloque de sentencias para ser ejecutadas en diferentes casos. <code>for</code> Marca un bloque de declaraciones para ejecutar en un bucle. <code>function</code> Declara una funci\u00f3n. <code>return</code> Retorna de una funci\u00f3n. <code>try</code> Implementa el manejo de errores en un bloque de declaraciones.. <p>Las palabras clave de JavaScript son palabras reservadas. Las palabras reservadas no se pueden utilizar como nombres de variables.</p>"},{"location":"04_js_statements/#conclusion","title":"Conclusi\u00f3n","text":"<p>Un programa JavaScript es una serie de declaraciones que el navegador ejecuta para realizar tareas espec\u00edficas. Estas declaraciones pueden incluir valores, operadores, expresiones, palabras clave y comentarios. En JavaScript, el punto y coma separa las declaraciones, aunque su uso no es obligatorio, es recomendable. Los bloques de c\u00f3digo se agrupan con llaves <code>{}</code> y se utilizan en funciones para ejecutar varias declaraciones. Las palabras clave como <code>var</code>, <code>let</code>, <code>const</code>, <code>if</code>, <code>for</code> y <code>function</code> son fundamentales en la programaci\u00f3n JavaScript.</p>"},{"location":"05_js_syntax/","title":"Sint\u00e1xis de JavaScript","text":"<p>La sintaxis de JavaScript es el conjunto de reglas sobre c\u00f3mo se construyen los programas en JavaScript.</p> <pre><code>// Como crear variables:\nvar x;\nlet y;\n\n// Como usar variables:\nx = 5;\ny = 6;\nlet z = x + y;\n</code></pre>"},{"location":"05_js_syntax/#valores-javascript","title":"Valores JavaScript","text":"<p>La sintaxis de JavaScript define dos tipos de valores:</p> <ul> <li>Valores fijos</li> <li>Valores variables</li> </ul> <p>Los valores fijos se llaman literales.</p> <p>Los valores de las variables se denominan variables.</p>"},{"location":"05_js_syntax/#literales-javascript","title":"Literales JavaScript","text":"<p>Las dos reglas de sintaxis m\u00e1s importantes para valores fijos son.</p> <ol> <li>Los n\u00fameros se escriben con o sin decimales:</li> </ol> <pre><code>10.50\n\n1001\n</code></pre> <ol> <li>Las cadenas son texto, escrito entre comillas dobles o simples:</li> </ol> <pre><code>\"John Doe\"\n\n'John Doe'\n</code></pre>"},{"location":"05_js_syntax/#variables-javascript","title":"Variables JavaScript","text":"<p>En un lenguaje de programaci\u00f3n, las variables se utilizan para almacenar valores de datos.</p> <p>JavaScript utiliza las palabras clave <code>var</code>, <code>let</code> y <code>const</code> para declarar variables.</p> <p>Se utiliza un signo igual para asignar valores a las variables.</p> <p>En este ejemplo, <code>x</code> se define como una variable. Entonces, a <code>x</code> se le asigna (dado) el valor <code>6</code>:</p> <pre><code>let x;\nx = 6;\n</code></pre>"},{"location":"05_js_syntax/#operadores-javascript","title":"Operadores JavaScript","text":"<p>JavaScript utiliza operadores aritm\u00e9ticos ( + - * / ) para calcular valores:</p> <pre><code>(5 + 6) * 10\n</code></pre> <p>JavaScript utiliza un operador de asignaci\u00f3n ( = ) para asignar valores a variables:</p> <pre><code>let x, y;\nx = 5;\ny = 6;\n</code></pre>"},{"location":"05_js_syntax/#expresiones-javascript","title":"Expresiones JavaScript","text":"<p>Una expresi\u00f3n es una combinaci\u00f3n de valores, variables y operadores, que calcula un valor.</p> <p>El c\u00e1lculo se llama evaluaci\u00f3n.</p> <p>Por ejemplo, 5 * 10 se eval\u00faa como 50:</p> <pre><code>5 * 10\n</code></pre> <p>Las expresiones tambi\u00e9n pueden contener valores variables:</p> <pre><code>x * 10\n</code></pre> <p>Los valores pueden ser de varios tipos, como n\u00fameros y cadenas.</p> <p>Por ejemplo, \"John\" + \" \" + \"Doe\", se eval\u00faa como \"John Doe\":</p> <pre><code>\"John\" + \" \" + \"Doe\"\n</code></pre>"},{"location":"05_js_syntax/#palabras-clave-javascript","title":"Palabras clave JavaScript","text":"<p>Las palabras clave de JavaScript se utilizan para identificar las acciones que se realizar\u00e1n.</p> <p>La palabra clave <code>let</code> le dice al navegador que cree variables:</p> <pre><code>let x, y;\nx = 5 + 6;\ny = x * 10;\n</code></pre> <p>La palabra clave <code>var</code> tambi\u00e9n le dice al navegador que cree variables:</p> <pre><code>var x, y;\nx = 5 + 6;\ny = x * 10;\n</code></pre> <p>En estos ejemplos, usar <code>var</code> o <code>let</code> producir\u00e1 el mismo resultado. Aprender\u00e1s m\u00e1s sobre <code>var</code> y <code>let</code> m\u00e1s adelante en este tutorial.</p>"},{"location":"05_js_syntax/#comentarios-javascript","title":"Comentarios JavaScript","text":"<p>No todas las declaraciones de JavaScript se \"ejecutan\".</p> <p>El c\u00f3digo despu\u00e9s de las barras dobles // o entre / y / se tratan como un comentario.</p> <p>Los comentarios se ignoran y no se ejecutar\u00e1n:</p> <pre><code>let x = 5;   // Se ejecutar\u00e1\n\n// x = 6;   No se ejecutar\u00e1\n</code></pre> <p>Aprender\u00e1s m\u00e1s sobre los comentarios en un cap\u00edtulo posterior.</p>"},{"location":"05_js_syntax/#identificadores-javascript","title":"Identificadores JavaScript","text":"<p>Los identificadores son nombres de JavaScript.</p> <p>Los identificadores se utilizan para nombrar variables, palabras clave y funciones.</p> <p>Las reglas para los nombres legales son las mismas en la mayor\u00eda de los lenguajes de programaci\u00f3n.</p> <p>Un nombre JavaScript debe comenzar con:</p> <ul> <li>Una letra (A-Z o a-z)</li> <li>Un signo de d\u00f3lar ($)</li> <li>Un gui\u00f3n bajo (_)</li> </ul> <p>Los caracteres siguientes pueden ser letras, d\u00edgitos, guiones bajos o signos de d\u00f3lar.</p> <p>Nota: No se permiten n\u00fameros como primer caracter en los identificadores. De esta forma, JavaScript puede distinguir f\u00e1cilmente los identificadores de los n\u00fameros.</p>"},{"location":"05_js_syntax/#javascript-es-case-sensitive","title":"JavaScript es case-sensitive","text":"<p>Todos los identificadores de JavaScript distinguen entre may\u00fasculas y min\u00fasculas.</p> <p>Las variables <code>lastName</code> y <code>lastname</code>, son dos variables diferentes:</p> <pre><code>let lastname, lastName;\nlastName = \"Doe\";\nlastname = \"Peterson\";\n</code></pre> <p>JavaScript no interpreta LET o Let como la palabra clave let.</p>"},{"location":"05_js_syntax/#javascript-y-camel-case","title":"JavaScript y Camel Case","text":"<p>Hist\u00f3ricamente, los programadores han utilizado diferentes formas de unir varias palabras en un nombre de variable:</p> <p>Guiones:</p> <p>first-name, last-name, master-card, inter-city</p> <p>Los guiones no est\u00e1n permitidos en JavaScript. Est\u00e1n reservados para operaciones de resta.</p> <p>Guiones bajo:</p> <p>first_name, last_name, master_card, inter_city</p> <p>May\u00fasculas Camel Case:</p> <p>FirstName, LastName, MasterCard, InterCity</p> <p>Min\u00fasculas Camel Case:</p> <p>Los programadores de JavaScript tienden a utilizar may\u00fasculas y min\u00fasculas que comienzan con una letra min\u00fascula:</p> <p>firstName, lastName, masterCard, interCity</p>"},{"location":"05_js_syntax/#charset-javascript","title":"Charset JavaScript","text":"<p>JavaScript utiliza el conjunto de caracteres Unicode.</p> <p>Unicode cubre (casi) todos los caracteres, puntuaciones y s\u00edmbolos del mundo.</p> <p>Para saber m\u00e1s, visita el art\u00edculo Complete Unicode Rerefence.</p>"},{"location":"05_js_syntax/#conclusion","title":"Conclusi\u00f3n","text":"<p>Aprendimos la sint\u00e1xis de JavaScript, c\u00f3mo declarar y usar las variables, los tipos de valores literales y variables, y el uso de operadores y expresiones. Tambi\u00e9n aprendimos el uso de las palabras clave <code>var</code>, <code>let</code>, y <code>const</code>, as\u00ed como el manejo de los comentarios, identificadores y case-sensitive.</p>"},{"location":"06_js_comments/","title":"Comentarios en JavaScript","text":"<p>Los comentarios en JavaScript se pueden utilizar para explicar el c\u00f3digo JavaScript y hacerlo m\u00e1s legible. </p> <p>Los comentarios en JavaScript tambi\u00e9n se pueden utilizar para evitar la ejecuci\u00f3n al probar c\u00f3digo alternativo.</p>"},{"location":"06_js_comments/#comentarios-en-linea","title":"Comentarios en l\u00ednea","text":"<p>Los comentarios de una sola l\u00ednea comienzan con <code>//</code>.</p> <p>JavaScript ignorar\u00e1 cualquier texto entre <code>//</code> y el final de la l\u00ednea (no se ejecutar\u00e1).</p> <p>Este ejemplo utiliza un comentario de una sola l\u00ednea antes de cada l\u00ednea de c\u00f3digo:</p> <p>Ejemplo:</p> <pre><code>// Cambia el encabezado:\ndocument.getElementById(\"myH\").innerHTML = \"Mi primera p\u00e1gina\";\n\n// Cambia el parrafo:\ndocument.getElementById(\"myP\").innerHTML = \"Mi primer p\u00e1rrafo.\";\n</code></pre> <p>En este ejemplo se utiliza un comentario de una sola l\u00ednea al final de cada l\u00ednea para explicar el c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>let x = 5;      // Declara x, dale el valor 5\nlet y = x + 2;  // Declara y, dale el valor x + 2\n</code></pre>"},{"location":"06_js_comments/#comentarios-en-bloque","title":"Comentarios en bloque","text":"<p>Los comentarios de varias l\u00edneas comienzan con <code>/*</code> y terminan con <code>*/</code>.</p> <p>JavaScript ignorar\u00e1 cualquier c\u00f3digo dentro de <code>/*</code> y <code>*/</code>.</p> <p>Este ejemplo utiliza un comentario de varias l\u00edneas (un bloque de comentarios) para explicar el c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>/*\nEl c\u00f3digo a continuaci\u00f3n cambiar\u00e1\nel encabezado con id=\"myH\"\ny el p\u00e1rrafo con id=\"myP\"\nen mi p\u00e1gina web:\n*/\n\ndocument.getElementById(\"myH\").innerHTML = \"Mi primera p\u00e1gina\";\ndocument.getElementById(\"myP\").innerHTML = \"Mi primer p\u00e1rrafo.\";\n</code></pre> <p>Lo m\u00e1s com\u00fan que se utiliza son los comentarios de una sola l\u00ednea. Los comentarios en bloque se utilizan a menudo para documentaci\u00f3n formal.</p>"},{"location":"06_js_comments/#comentarios-para-pruebas","title":"Comentarios para pruebas","text":"<p>El uso de comentarios para evitar la ejecuci\u00f3n de c\u00f3digo es adecuado para las pruebas de c\u00f3digo.</p> <p>Agregar <code>//</code> delante de una l\u00ednea de c\u00f3digo cambia las l\u00edneas de c\u00f3digo de una l\u00ednea ejecutable a un comentario.</p> <p>Este ejemplo utiliza <code>//</code> para evitar la ejecuci\u00f3n de una de las l\u00edneas de c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>//document.getElementById(\"myH\").innerHTML = \"Mi primera p\u00e1gina\";\ndocument.getElementById(\"myP\").innerHTML = \"Mi primer p\u00e1rrafo.\";\n</code></pre> <p>Este ejemplo utiliza un bloque de comentarios para evitar la ejecuci\u00f3n de varias l\u00edneas.</p> <p>Ejemplo:</p> <pre><code>/*\ndocument.getElementById(\"myH\").innerHTML = \"Mi primera p\u00e1gina\";\ndocument.getElementById(\"myP\").innerHTML = \"Mi primer p\u00e1rrafo.\";\n*/\n</code></pre>"},{"location":"06_js_comments/#conclusion","title":"Conclusi\u00f3n","text":"<p>Los comentarios en JavaScript sirven para explicar y mejorar la legibilidad del c\u00f3digo, adem\u00e1s para desactivar partes del mismo durante pruebas. Existen comentarios de una sola l\u00ednea, iniciados con <code>//</code>, y de varias l\u00edneas, delimitados por <code>/*</code> y <code>*/</code>. Los comentarios de una sola l\u00ednea son m\u00e1s comunes, mientras que los de bloque se usan para documentaci\u00f3n formal. Utilizar comentarios es \u00fatil para evitar la ejecuci\u00f3n de c\u00f3digo sin necesidad de eliminarlo por completo.</p>"},{"location":"07_js_variables/","title":"JS Variables","text":""},{"location":"07_js_variables/#las-variables-son-contenedores-para-almacenar-datos","title":"Las variables son contenedores para almacenar datos","text":"<p>Las variables en JavaScript se pueden declarar de 4 formas:</p> <ul> <li>Autom\u00e1ticamente</li> <li>Usando <code>var</code></li> <li>Usando <code>let</code></li> <li>Usando <code>const</code></li> </ul> <p>En este primer ejemplo, <code>x</code>, <code>y</code> y <code>z</code> son variables no declaradas.</p> <p>Se declaran autom\u00e1ticamente cuando se utilizan por primera vez.</p> <p>Ejemplo:</p> <pre><code>x = 5;\ny = 6;\nz = x + y;\n</code></pre>"},{"location":"07_js_variables/#nota-1","title":"Nota 1","text":"<p>Se considera una buena pr\u00e1ctica de programaci\u00f3n declarar siempre las variables antes de usarse.</p> <p>Del siguiente ejemplo puedes adivinar:</p> <ul> <li><code>x</code> almacena el valor <code>5</code></li> <li><code>y</code> almacena el valor <code>6</code></li> <li><code>z</code> almacena el valor <code>11</code></li> </ul> <p>Ejemplo:</p> <pre><code>var x = 5;\nvar y = 6;\nvar z = x + y;\n</code></pre>"},{"location":"07_js_variables/#nota-2","title":"Nota 2","text":"<p>La palabra clave <code>var</code> se utiliz\u00f3 en todo el c\u00f3digo JavaScript desde 1995 hasta 2015.</p> <p>Las palabras clave <code>let</code> y <code>const</code> se agregaron a JavaScript en 2015.</p> <p>La palabra clave <code>var</code> s\u00f3lo debe usarse en c\u00f3digo escrito para navegadores m\u00e1s antiguos.</p> <p>Ejemplo con <code>let</code>:</p> <pre><code>let x = 5;\nlet y = 6;\nlet z = x + y;\n</code></pre> <p>Ejemplo con <code>const</code>:</p> <pre><code>const x = 5;\nconst y = 6;\nconst z = x + y;\n</code></pre> <p>Ejemplo mixto:</p> <pre><code>const price1 = 5;\nconst price2 = 6;\nlet total = price1 + price2;\n</code></pre> <p>Las dos variables <code>price1</code> y <code>price2</code> se declaran con la palabra clave `constv.</p> <p>Estos son valores constantes y no se pueden cambiar.</p> <p>La variable total se declara con la palabra clave <code>let</code>.</p> <p>El valor de la variable <code>total</code> puede cambiar.</p>"},{"location":"07_js_variables/#cuando-utilizar-var-let-o-const","title":"\u00bfCu\u00e1ndo utilizar <code>var</code>, <code>let</code> o <code>const</code>?","text":"<ol> <li>Siempre declare variables.</li> <li>Siempre utilice <code>const</code> si el valor no va cambiar.</li> <li>Siempre utilice <code>const</code> si no va cambiar el tipo (matrices y objetos).</li> <li>Solo usa <code>let</code> si no puedes usar <code>const</code>.</li> <li>Utilice <code>var</code> \u00fanicamente si DEBES codificar para navegadores antiguos.</li> </ol>"},{"location":"07_js_variables/#como-en-el-algebra","title":"Como en el \u00e1lgebra","text":"<p>Al igual que en \u00e1lgebra, las variables contienen valores:</p> <pre><code>let x = 5;\nlet y = 6;\n</code></pre> <p>Al igual que en \u00e1lgebra, las variables se utilizan en expresiones:</p> <pre><code>let z = x + y;\n</code></pre> <p>A partir del ejemplo anterior, puedes adivinar que el total calculado es 11.</p> <p>Nota: Las variables son contenedores para almacenar valores.</p>"},{"location":"07_js_variables/#identificadores-javascript","title":"Identificadores JavaScript","text":"<p>Todas las variables de JavaScript deben identificarse con nombres \u00fanicos.</p> <p>Estos nombres \u00fanicos se denominan identificadores.</p> <p>Los identificadores pueden ser nombres cortos (como <code>x</code> y <code>y</code>) o nombres m\u00e1s descriptivos (edad, suma, volumenTotal).</p> <p>Las reglas generales para crear nombres de variables (identificadores \u00fanicos) son:</p> <ul> <li>Los nombres pueden contener letras, d\u00edgitos, guiones bajos y signos de d\u00f3lar.</li> <li>Los nombres deben comenzar con una letra.</li> <li>Los nombres tambi\u00e9n pueden comenzar con $_ (pero no lo usaremos en este tutorial).</li> <li>Los nombres distinguen entre may\u00fasculas y min\u00fasculas (<code>y</code> y <code>Y</code> son variables diferentes).</li> <li>Las palabras reservadas (como las palabras clave de JavaScript) no se pueden utilizar como nombres de variables.</li> </ul> <p>Nota: Los identificadores JavaScript distinguen entre may\u00fasculas y min\u00fasculas.</p>"},{"location":"07_js_variables/#el-operador-de-asignacion","title":"El operador de asignaci\u00f3n","text":"<p>En JavaScript, el signo igual (<code>=</code>) es un operador de \"asignaci\u00f3n\", no un operador \"igual a\".</p> <p>Esto es diferente del \u00e1lgebra. El siguiente ejemplo no tiene sentido en \u00e1lgebra:</p> <pre><code>x = x + 5\n</code></pre> <p>Sin embargo, en JavaScript, tiene mucho sentido: asigna el valor de <code>x</code> + <code>5</code> <code>x</code>.</p> <p>(Calcula el valor de <code>x</code> + <code>5</code> y coloca el resultado en <code>x</code>. El valor de <code>x</code> se incrementa en <code>5</code>).</p> <p>Nota: El operador \"igual a\" se escribe as\u00ed <code>==</code> en JavaScript.</p>"},{"location":"07_js_variables/#tipos-de-datos-javascript","title":"Tipos de datos JavaScript","text":"<p>Las variables de JavaScript pueden contener n\u00fameros y valores de texto.</p> <p>En programaci\u00f3n, los valores de texto se denominan cadenas de texto.</p> <p>JavaScript puede manejar muchos tipos de datos, pero por ahora, s\u00f3lo piense en n\u00fameros y cadenas de texto.</p> <p>Las cadenas se escriben entre comillas dobles o simples. Los n\u00fameros se escriben sin comillas.</p> <p>Si pones un n\u00famero entre comillas, ser\u00e1 tratado como una cadena de texto.</p> <p>Ejemplo:</p> <pre><code>const pi = 3.14;\nlet persona = \"John Doe\";\nlet rpta = 'Si, soy yo';\n</code></pre>"},{"location":"07_js_variables/#declarar-una-variable","title":"Declarar una variable","text":"<p>Crear una variable en JavaScript se llama \"declarar\" una variable.</p> <p>Declaras una variable JavaScript con la palabra clave <code>var</code> o <code>let</code>:</p> <pre><code>var carName;\n</code></pre> <pre><code>let carName;\n</code></pre> <p>Despu\u00e9s de ser declarado, la variable no tiene valor (t\u00e9cnicamente no est\u00e1 definida).</p> <p>Para asignar un valor a la variable, use el signo igual:</p> <pre><code>carName = \"Volvo\";\n</code></pre> <p>Tambi\u00e9n puedes asignar un valor a la variable cuando la declaras:</p> <pre><code>let carName = \"Volvo\";\n</code></pre> <p>En el siguiente ejemplo, creamos una variable llamada <code>carName</code> y le asignamos el valor \"Volvo\".</p> <p>Luego \"generamos\" el valor dentro de un p\u00e1rrafo HTML con <code>id=\"demo\"</code>:</p> <p>Ejemplo:</p> <pre><code>&lt;p id=\"demo\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\n    let carName = \"Volvo\";\n    document.getElementById(\"demo\").innerHTML = carName;\n&lt;/script&gt;\n</code></pre> <p>Nota: Es una buena pr\u00e1ctica de programaci\u00f3n declarar todas las variables al comienzo de un script.</p>"},{"location":"07_js_variables/#una-declaracion-muchas-variables","title":"Una declaraci\u00f3n, muchas variables","text":"<p>Puedes declarar muchas variables en una sola declaraci\u00f3n.</p> <p>Comienza la declaraci\u00f3n con <code>let</code> y separe las variables con una coma.</p> <p>Ejemplo:</p> <pre><code>let person = \"John Doe\", carName = \"Volvo\", price = 200;\n</code></pre> <p>Una declaraci\u00f3n puede abarcar varias l\u00edneas:</p> <p>Ejemplo:</p> <pre><code>let person = \"John Doe\",\ncarName = \"Volvo\",\nprice = 200;\n</code></pre>"},{"location":"07_js_variables/#valor-indefinido","title":"Valor = indefinido","text":"<p>En los programas de computadora, las variables a menudo se declaran sin valor. El valor puede ser algo que deba calcularse o algo que se proporcionar\u00e1 m\u00e1s adelante, como la entrada del usuario.</p> <p>Una variable declarada sin valor tendr\u00e1 el valor <code>undefined</code>.</p> <p>La variable <code>carName</code> tendr\u00e1 el valor <code>undefined</code> despu\u00e9s de la ejecuci\u00f3n de esta declaraci\u00f3n.</p> <p>Ejemplo:</p> <pre><code>let carName;\n</code></pre>"},{"location":"07_js_variables/#volver-a-declarar-variables-javascript","title":"Volver a declarar variables JavaScript","text":"<p>Si vuelves a declarar una variable JavaScript declarada con <code>var</code>, este no perder\u00e1 su valor.</p> <p>La variable <code>carName</code> seguir\u00e1 teniendo el valor \"Volvo\" despu\u00e9s de la ejecuci\u00f3n de estas declaraciones.</p> <p>Ejemplo:</p> <pre><code>var carName = \"Volvo\";\nvar carName;\n</code></pre>"},{"location":"07_js_variables/#nota","title":"Nota","text":"<p>No puedes volver a declarar una variable declarada con let o const.</p> <p>Esto no funcionar\u00e1:\ud83d\udc47</p> <pre><code>let carName = \"Volvo\";\nlet carName;\n</code></pre>"},{"location":"07_js_variables/#aritmetica-de-javascript","title":"Aritm\u00e9tica de JavaScript","text":"<p>Al igual que con el \u00e1lgebra, puedes hacer aritm\u00e9tica con variables de JavaScript, usando operadores como <code>=</code> y <code>+</code>:</p> <p>Ejemplo:</p> <pre><code>let x = 5 + 2 + 3;\n</code></pre> <p>Tambi\u00e9n puedes agregar cadenas, pero las cadenas estar\u00e1n concatenadas:</p> <p>Ejemplo:</p> <pre><code>let x = \"John\" + \" \" + \"Doe\";\n</code></pre> <p>Prueba tambi\u00e9n esto:</p> <p>Ejemplo:</p> <pre><code>let x = \"5\" + 2 + 3;\n</code></pre>"},{"location":"07_js_variables/#nota_1","title":"Nota","text":"<p>Si pone un n\u00famero entre comillas, el resto de los n\u00fameros se tratar\u00e1n como cadenas y se concatenar\u00e1n.</p> <p>Ahora prueba esto:</p> <p>Ejemplo:</p> <pre><code>let x = 2 + 3 + \"5\";\n</code></pre>"},{"location":"07_js_variables/#signo-de-dolar-javascript","title":"Signo de d\u00f3lar JavaScript","text":"<p>Dado que JavaScript trata un signo de d\u00f3lar como una letra, los identificadores que contienen $ son nombres de variables v\u00e1lidos:</p> <p>Ejemplo:</p> <pre><code>let $ = \"Hola Mundo\";\nlet $$$ = 2;\nlet $myMoney = 5;\n</code></pre> <p>El uso del signo de d\u00f3lar no es muy com\u00fan en JavaScript, pero los programadores profesionales suelen utilizarlo como alias para la funci\u00f3n principal en una biblioteca de JavaScript.</p> <p>En la biblioteca JavaScript jQuery, por ejemplo, la funci\u00f3n principal <code>$</code> se utiliza para seleccionar elementos HTML. En jQuery <code>$(\"p\");</code> significa \"seleccionar todos los p elementos\".</p>"},{"location":"07_js_variables/#subrayado-en-javascript","title":"Subrayado en JavaScript","text":"<p>Dado que JavaScript trata el gui\u00f3n bajo como una letra, los identificadores que contienen <code>_</code> son nombres de variables v\u00e1lidos:</p> <p>Ejemplo:</p> <pre><code>let _lastName = \"Johnson\";\nlet _x = 2;\nlet _100 = 5;\n</code></pre> <p>El uso del gui\u00f3n bajo no es muy com\u00fan en JavaScript, pero una convenci\u00f3n entre los programadores profesionales es usarlo como alias para variables \"privadas (ocultas)\".</p>"},{"location":"07_js_variables/#conclusion","title":"Conclusi\u00f3n","text":"<p>En JavaScript, las variables almacenan datos y se pueden declarar con <code>var</code>, <code>let</code>, o <code>const</code>. <code>var</code> es obsoleto, mientras que <code>let</code> y <code>const</code> son preferibles. Las variables deben tener identificadores \u00fanicos y pueden contener n\u00fameros o cadenas de texto. Es importante declarar variables antes de usarlas y seguir buenas pr\u00e1cticas.</p>"},{"location":"08_js_let/","title":"JavaScript Let","text":"<p>La palabra clave <code>let</code> se introdujo en ES6 (2015).</p> <p>Las variables definidas con <code>let</code> tienen alcance de bloque.</p> <p>Las variables definidas con <code>let</code> deben declararse antes de su uso.</p> <p>Las variables definidas con <code>let</code> no se pueden volver a declarar.</p>"},{"location":"08_js_let/#alcance-de-bloque","title":"Alcance de bloque","text":"<p>Antes de ES6 (2015), JavaScript no ten\u00eda alcance de bloque.</p> <p>JavaScript ten\u00eda alcance global y alcance de funci\u00f3n.</p> <p>ES6 introdujo dos nuevas palabras clave de JavaScript: <code>let</code> y <code>const</code>.</p> <p>Estas dos palabras clave proporcionaban alcance de bloque en JavaScript.</p> <p>Ejemplo:</p> <p>No se puede acceder a las variables declaradas dentro de un bloque { } desde fuera del bloque:</p> <pre><code>{\n  let x = 2;\n}\n// x NO puede ser usado aqu\u00ed\n</code></pre>"},{"location":"08_js_let/#alcance-global","title":"Alcance global","text":""}]}